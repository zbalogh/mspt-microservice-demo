version: '3.9'

# This is the development docker swarm stack file which opens all ports to the host machine
# in order to be able to access all services directly for debugging purpose.

services:

  # PostgreSQL server
  postgres-db-server:
    image: postgres:9.6
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: msptdbsecret
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./docker-data/postgres-data:/var/lib/postgresql/data
      - ./postgres-initdb:/docker-entrypoint-initdb.d/
    # running postgres on port 5432
    expose:
      - "5432"
    ports:
      - "5432:5432"
    command: [ "-p 5432" ]
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - mspt-microservice-network

  # MongoDB server
  mongodb-server:
    image: mongo:6.0.1
    ports:
      - "27017:27017"
    volumes:
      - ./docker-data/mongo-data:/data/db
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  # Redis server
  redis-server:
    image: redis:7.0.7
    ports:
      - "6379:6379"
    volumes:
      - ./docker-data/redis-data:/data
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  # Keycloak Identity Provider
  keycloak-server:
    image: quay.io/keycloak/keycloak:18.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HTTP_RELATIVE_PATH: /keycloak
      KC_HTTP_PORT: 8181
      KC_HTTPS_PORT: 8182
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/keycloak-dev.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/keycloak-dev.key
    ports:
      - "8181:8181"
      - "8182:8182"
    volumes:
      - ./docker-data/keycloak-data:/opt/keycloak/data
      - ./keycloak-cert/keycloak-dev.crt:/opt/keycloak/conf/keycloak-dev.crt
      - ./keycloak-cert/keycloak-dev.key:/opt/keycloak/conf/keycloak-dev.key
      - ./realms:/opt/keycloak/data/import
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  # Zipkin for distributed tracing
  zipkin-server:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  # Zookeeper server
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  # Apache Kafka (broker)
  # https://developer.confluent.io/quickstart/kafka-docker/
  kafka-broker:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka-broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - ./docker-data/prometheus-data:/prometheus
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  ## Grafana
  grafana:
    image: grafana/grafana-oss:8.5.2
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./docker-data/grafana-data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  ## Loki
  loki:
    image: grafana/loki:main
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure


  #
  # Application Services
  #

  mspt-api-gateway:
    image: zbalogh/mspt-api-gateway:latest
    ports:
      - "8000:8000"
    expose:
      - "8000"
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
      - MSPT_KEYSTORE_FILENAME=msptks-demo.jks
      - MSPT_KEYSTORE_PASSWORD=msptstore123
      # in dev mode we do not need SSL (HTTPS)
      - MSPT_SERVER_SSL_ENABLED=false
    depends_on:
      - zipkin-server
      - keycloak-server
    volumes:
      - ./apigw-keystore/msptks-demo.jks:/app/resources/keystore/msptks-demo.jks
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-webgui-server:
    image: zbalogh/mspt-angular-ui:latest
    ports:
      - "8050:8050"
    depends_on:
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-product-service:
    image: zbalogh/mspt-product-service:latest
    ports:
      - "8083:8083"
    depends_on:
      - mongodb-server
      - zipkin-server
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-order-service:
    image: zbalogh/mspt-order-service:latest
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: msptdbsecret
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db-server:5432/MSPT-OrderService
      TZ: "Europe/Budapest"
      LC_TIME: "hu_HU.UTF-8"
    ports:
      - "8085:8085"
    depends_on:
      - postgres-db-server
      - kafka-broker
      - zipkin-server
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-inventory-service:
    image: zbalogh/mspt-inventory-service:latest
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: msptdbsecret
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db-server:5432/MSPT-InventoryService
    ports:
      - "8082:8082"
    depends_on:
      - postgres-db-server
      - zipkin-server
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-notification-service:
    image: zbalogh/mspt-notification-service:latest
    ports:
      - "8084:8084"
    depends_on:
      - kafka-broker
      - zipkin-server
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  mspt-shoppingcart-service:
    image: zbalogh/mspt-shoppingcart-service:latest
    ports:
      - "8086:8086"
    depends_on:
      - redis-server
      - zipkin-server
      - mspt-api-gateway
    networks:
      - mspt-microservice-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure


# this docker network is used for inter-communication between services
networks:
  mspt-microservice-network:
