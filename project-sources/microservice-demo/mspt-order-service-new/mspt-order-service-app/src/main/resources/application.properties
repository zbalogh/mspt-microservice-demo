spring.application.name=mspt-order-service
server.port=8085

# Show all queries
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.show-sql=true

# Database Properties for PostgreSQL
spring.datasource.url=jdbc:postgresql://${DB_HOSTNAME:postgres-server}:5432/MSPT-OrderService
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:msptdbsecret}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL92Dialect

# Hibernate DDL auto (create, create-drop, validate, update)
###spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update

#spring.datasource.initialization-mode=always
#spring.sql.init.mode=always



# Enable/Disable Eureka Discovery Client because we will use the Kubernetes built-in Service with load balancing
spring.cloud.discovery.enabled=false

# https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-eureka-server.html
# We prefer using IP address
eureka.instance.preferIpAddress=true

# This is the Eureka Service URL to access Eureka service via HTTP
#eureka.client.service-url.defaultZone:http://mspt-discovery-server:8761/eureka
eureka.client.service-url.defaultZone:http://eureka:pwd12345@mspt-discovery-server:8761/eureka



# Enable Health for circuit breakers
management.health.circuitbreakers.enabled=true
# actuator exposes all (health) web end-points
management.endpoints.web.exposure.include=*
# Show the complete health details
management.endpoint.health.show-details=always



#-----------------------------------------
# Resilinece4j Circuit Breaker Properties
#-----------------------------------------
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# we use sliding window with count based mechanism: the state will be OPEN if window size is reached
# if number of failed requests reches the sliding window size, then the state changes to OPEN (circuit breaker gets ON)
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# if 50% of the request failed, then circuit breaker gets ON
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# wait 5 seconds before changing to to half-open state (during that time all request is being refused)
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# the number of allowed request (calls) in half-open state. If they are still failed, then the state gets back to OPEN
# if requests are successful, then the state changes to CLOSED. (circuit breaker gets OFF)
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#---------------------------------
# Resilience4J Timeout Properties
#---------------------------------
# specify timeout: after 10 seconds the request will be timed out (request handled as failed by resilience4j)
resilience4j.timelimiter.instances.inventory.timeout-duration=10s

#-------------------------------
# Resilience4J Retry Properties
#-------------------------------
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s



#-----------------------------
# Zipkin/Sleuth configuration
#-----------------------------
spring.zipkin.base-url=http://zipkin-server:9411
spring.sleuth.sampler.probability=1.0



#------------------
# Kafka Properties
#------------------
spring.kafka.bootstrap-servers=kafka-broker:9092
message.topic.name=mspt-notification-topic
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.type.mapping=orderEvent:com.programming.techie.orderservice.kafka.OrderPlacedEvent



#-------------------------------
# Swagger/OpenAPI configuration
#-------------------------------
springdoc.api-docs.path=/api/order/swagger/api-docs
springdoc.swagger-ui.path=/api/order/swagger/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
