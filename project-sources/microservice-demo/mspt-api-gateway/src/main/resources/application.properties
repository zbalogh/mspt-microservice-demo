spring.application.name=mspt-api-gateway
server.port=8000


# enable logging for gateway
logging.level.root= INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE

# enable logging for Spring Security
logging.level.org.springframework.security=DEBUG



# Enable/Disable Eureka Discovery Client because we will use the Kubernetes built-in Service with load balancing
spring.cloud.discovery.enabled=false

# We prefer using IP address
eureka.instance.preferIpAddress=true

# This is the Eureka Service URL to access Eureka service via HTTP
###eureka.client.service-url.defaultZone:http://mspt-discovery-server:8761/eureka
eureka.client.service-url.defaultZone:http://eureka:pwd12345@mspt-discovery-server:8761/eureka



################################
# ------ Define Routing ------ #     
################################

## Product Service Route
spring.cloud.gateway.routes[0].id=mspt-product-service
spring.cloud.gateway.routes[0].uri=http://mspt-product-service:8083
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product/**

## Order Service Route
spring.cloud.gateway.routes[1].id=mspt-order-service
spring.cloud.gateway.routes[1].uri=http://mspt-order-service:8085
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**

## Inventory Service Route
spring.cloud.gateway.routes[2].id=mspt-inventory-service
spring.cloud.gateway.routes[2].uri=http://mspt-inventory-service:8082
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/inventory/**

## Notification Service Route
spring.cloud.gateway.routes[3].id=mspt-notification-service
spring.cloud.gateway.routes[3].uri=http://mspt-notification-service:8084
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/notification/**


## Product Service Actuator
spring.cloud.gateway.routes[4].id=mspt-product-service-actuator
spring.cloud.gateway.routes[4].uri=http://mspt-product-service:8083
spring.cloud.gateway.routes[4].predicates[0]=Path=/actuator/product-api/**
spring.cloud.gateway.routes[4].filters[0]=RewritePath=/actuator/product-api/(?<segment>.*), /actuator/$\{segment}

## Order Service Actuator
spring.cloud.gateway.routes[5].id=mspt-order-service-actuator
spring.cloud.gateway.routes[5].uri=http://mspt-order-service:8085
spring.cloud.gateway.routes[5].predicates[0]=Path=/actuator/order-api/**
spring.cloud.gateway.routes[5].filters[0]=RewritePath=/actuator/order-api/(?<segment>.*), /actuator/$\{segment}

## Inventory Service Actuator
spring.cloud.gateway.routes[6].id=mspt-inventory-service-actuator
spring.cloud.gateway.routes[6].uri=http://mspt-inventory-service:8082
spring.cloud.gateway.routes[6].predicates[0]=Path=/actuator/inventory-api/**
spring.cloud.gateway.routes[6].filters[0]=RewritePath=/actuator/inventory-api/(?<segment>.*), /actuator/$\{segment}

## Notification Service Actuator
spring.cloud.gateway.routes[7].id=mspt-notification-service-actuator
spring.cloud.gateway.routes[7].uri=http://mspt-notification-service:8084
spring.cloud.gateway.routes[7].predicates[0]=Path=/actuator/notification-api/**
spring.cloud.gateway.routes[7].filters[0]=RewritePath=/actuator/notification-api/(?<segment>.*), /actuator/$\{segment}


## ShoppingCart Service Route
spring.cloud.gateway.routes[8].id=mspt-shoppingcart-service
spring.cloud.gateway.routes[8].uri=http://mspt-shoppingcart-service:8086
spring.cloud.gateway.routes[8].predicates[0]=Path=/api/cart/**

## ShoppingCart Service Actuator
spring.cloud.gateway.routes[9].id=mspt-shoppingcart-service-actuator
spring.cloud.gateway.routes[9].uri=http://mspt-shoppingcart-service:8086
spring.cloud.gateway.routes[9].predicates[0]=Path=/actuator/cart-api/**
spring.cloud.gateway.routes[9].filters[0]=RewritePath=/actuator/cart-api/(?<segment>.*), /actuator/$\{segment}


#
# NOTE: see more routing definitions in the 'GatewayRouteConfig.java' class
#




#----------------------------------------------------------
# KEYCLOAK OAuth2 authorization Server as JWT token issuer
#----------------------------------------------------------
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak-server:8181/keycloak/realms/mspt-microservice-realm
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak-server:8181/keycloak/realms/mspt-microservice-realm/protocol/openid-connect/certs
#spring.security.oauth2.resourceserver.jwt.audience=account


#-------------------------------------------------------
# AZURE OAuth2 authorization Server as JWT token issuer
#-------------------------------------------------------
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://sts.windows.net/00771f30-4c46-4712-be4e-c168b536c41b/
###spring.security.oauth2.resourceserver.jwt.issuer-uri=https://login.microsoftonline.com/00771f30-4c46-4712-be4e-c168b536c41b/v2.0
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://login.microsoftonline.com/00771f30-4c46-4712-be4e-c168b536c41b/discovery/v2.0/keys
###spring.security.oauth2.resourceserver.jwt.client-id=0c2a2218-d0c3-42da-a30a-24d604f279a8
#spring.security.oauth2.resourceserver.jwt.audience=api://0c2a2218-d0c3-42da-a30a-24d604f279a8


#-----------------------------------------------------
# FIREBASE authorization Server as JWT token issuer
#-----------------------------------------------------
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://securetoken.google.com/mspt-microservice-demo
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com
spring.security.oauth2.resourceserver.jwt.audience=mspt-microservice-demo




#-----------------------------
# Zipkin/Sleuth configuration
#-----------------------------
spring.zipkin.base-url=http://zipkin-server:9411
spring.sleuth.sampler.probability=1.0



#-----------------------------------------------------------
# Expose the Actuator Health, Info and Prometheus Endpoints
# The endpoint URL for Prometheus: /actuator/prometheus
#-----------------------------------------------------------
management.endpoints.web.exposure.include=health,info,prometheus



#-------------------------
# Configure SSL for HTTPS
#-------------------------
# the default (demo) JKS
server.ssl.key-store=classpath:keystore/${MSPT_KEYSTORE_FILENAME:msptkeystore-dev.jks}
# the default password the default JKS
server.ssl.key-store-password=${MSPT_KEYSTORE_PASSWORD:msptstore123}
# we use JKS store
server.ssl.key-store-type=jks
# define the alias for the key
server.ssl.key-alias=mspt
# it is same as the default JKS store password
#server.ssl.key-password=msptstore123
# enable/disable SSL (HTTPS) protocol. The default is disabled.
server.ssl.enabled=${MSPT_SERVER_SSL_ENABLED:false}
